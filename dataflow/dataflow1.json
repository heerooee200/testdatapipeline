{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "DLCadenasLinkedService",
						"type": "LinkedServiceReference"
					},
					"name": "archivo"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TransformedJson",
						"type": "DatasetReference"
					},
					"name": "sinkM"
				},
				{
					"dataset": {
						"referenceName": "TransformedJson",
						"type": "DatasetReference"
					},
					"name": "sinkR"
				},
				{
					"dataset": {
						"referenceName": "TransformedJson",
						"type": "DatasetReference"
					},
					"name": "sinkN"
				},
				{
					"dataset": {
						"referenceName": "TransformedJson",
						"type": "DatasetReference"
					},
					"name": "sinkC"
				},
				{
					"dataset": {
						"referenceName": "TransformedJson",
						"type": "DatasetReference"
					},
					"name": "sinkJ"
				},
				{
					"dataset": {
						"referenceName": "TransformedJson",
						"type": "DatasetReference"
					},
					"name": "sinkP"
				},
				{
					"dataset": {
						"referenceName": "TransformedJson",
						"type": "DatasetReference"
					},
					"name": "sinkS"
				}
			],
			"transformations": [
				{
					"name": "Mapeo",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "GroupBySku"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "AggregateM"
				},
				{
					"name": "OrdenarFecha"
				},
				{
					"name": "AggregateR"
				},
				{
					"name": "AggregateN"
				},
				{
					"name": "AggregateC"
				},
				{
					"name": "AggregateJ"
				},
				{
					"name": "AggregateP"
				},
				{
					"name": "AggregateS"
				}
			],
			"script": "parameters{\n\tpath_file as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'files',\n\tfileName: (concat($path_file,\".csv\")),\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tqutoChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> archivo\narchivo derive(sku_cadena = toString(byName('sku_cadena')),\n\t\tventa_clp_dia = toString(byName('venta_clp_dia')),\n\t\tventa_unidades_dia = toString(byName('venta_unidades_dia')),\n\t\tstock = toString(byName('stock')),\n\t\tfecha = toString(byName('fecha')),\n\t\tcadena = toString(byName('cadena'))) ~> Mapeo\nOrdenarFecha aggregate(groupBy(sku_cadena,\n\t\tcadena),\n\tvalues = collect(@(fecha = fecha, venta_unidades_dia = venta_unidades_dia, venta_clp_dia = venta_clp_dia, stock = stock))) ~> GroupBySku\nGroupBySku split(equals(cadena,\"Mariaside\"),\n\tequals(cadena,\"Rebeccaburgh\"),\n\tequals(cadena,\"North Eric\"),\n\tequals(cadena,\"Cookville\"),\n\tequals(cadena,\"Josephville\"),\n\tequals(cadena,\"Port Danielle\"),\n\tequals(cadena,\"South Christopher\"),\n\tdisjoint: true) ~> ConditionalSplit1@(Mariaside, Rebeccaburgh, NorthEric, Cookville, Josephville, PortDanielle, SouthChristopher)\nConditionalSplit1@Mariaside aggregate(groupBy(cadena),\n\tMariaside = collect(@(sku_cadena=sku_cadena,\t\tvalues=values))) ~> AggregateM\nMapeo sort(asc(fecha, true),\n\tasc(sku_cadena, true)) ~> OrdenarFecha\nConditionalSplit1@Rebeccaburgh aggregate(groupBy(cadena),\n\tRebeccaburgh = collect(@(sku_cadena=sku_cadena,\t\tvalues=values))) ~> AggregateR\nConditionalSplit1@NorthEric aggregate(groupBy(cadena),\n\t{North Eric} = collect(@(sku_cadena=sku_cadena,\t\tvalues=values))) ~> AggregateN\nConditionalSplit1@Cookville aggregate(groupBy(cadena),\n\tCookville = collect(@(sku_cadena=sku_cadena,\t\tvalues=values))) ~> AggregateC\nConditionalSplit1@Josephville aggregate(groupBy(cadena),\n\tJosephville = collect(@(sku_cadena=sku_cadena,\t\tvalues=values))) ~> AggregateJ\nConditionalSplit1@PortDanielle aggregate(groupBy(cadena),\n\t{Port Danielle} = collect(@(sku_cadena=sku_cadena,\t\tvalues=values))) ~> AggregateP\nConditionalSplit1@SouthChristopher aggregate(groupBy(cadena),\n\t{South Christopher} = collect(@(sku_cadena=sku_cadena,\t\tvalues=values))) ~> AggregateS\nAggregateM sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(\"Mariaside-\",$path_file,\".json\"))],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tmariaside = Mariaside\n\t),\n\tpartitionBy('hash', 1)) ~> sinkM\nAggregateR sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(\"Rebeccaburgh-\",$path_file,\".json\"))],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tRebeccaburgh\n\t),\n\tpartitionBy('hash', 1)) ~> sinkR\nAggregateN sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(\"NorthEric-\",$path_file,\".json\"))],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\t{North Eric}\n\t),\n\tpartitionBy('hash', 1)) ~> sinkN\nAggregateC sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(\"Cookville-\",$path_file,\".json\"))],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tCookville\n\t),\n\tpartitionBy('hash', 1)) ~> sinkC\nAggregateJ sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(\"Josephville-\",$path_file,\".json\"))],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tJosephville\n\t),\n\tpartitionBy('hash', 1)) ~> sinkJ\nAggregateP sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(\"PortDanielle-\",$path_file,\".json\"))],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\t{Port Danielle}\n\t),\n\tpartitionBy('hash', 1)) ~> sinkP\nAggregateS sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(\"SouthChristopher-\",$path_file,\".json\"))],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\t{South Christopher}\n\t),\n\tpartitionBy('hash', 1)) ~> sinkS"
		}
	}
}